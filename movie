#!/usr/bin/env ruby
require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'models/movie_entries'
require_relative 'lib/interactions'
#Router
class MovieScript
  include Interactions
  attr_reader :options

  def initialize
    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection

    if options[:command] == "search"
      search_term = ask("What do you want to search for?")
      search_movie_entries_for(search_term)
    elsif options[:command] == "add"
      add_movie_entry()
    elsif options[:command] == "list"
      list_movies()
    elsif options[:command] == "edit"
      if movie_entry = MovieEntries.find(options[:id])
        movie_entry.update(options)
        puts "Movie entry #{movie_entry.id} is now named #{movie_entry.title}, with seen #{movie_entry.seen}, own #{movie_entry.own}, wishlist see #{movie_entry.wishlist_see}, wishlist own #{movie_entry.wishlist_own}, user rating #{movie_entry.user_rating}"
      else
        puts "Movie entry #{options[:id]} couldn't be found"
      end
    elsif options[:command] == "ratings_compare"
      compare_ratings()
    else
      puts "Command not implemented"
    end
  end

  # entries = all entries where user_rating is not "none"
  # entries.each
    # user_rating = entry.user_rating
    # crtic = entry.movie.rottensfg
  def compare_ratings()
    entries = MovieEntries.compare_ratings
    total = 0
    entries.each do |entry|
      diff = entry.user_rating.to_i - entry.movie.tomato_meter.to_i
      pos_diff = diff < 0 ? diff * (-1) : diff
      total += pos_diff
    end
    avg = (total / entries.count).ceil
    puts "Your taste sucks. Your average critic rating difference is #{avg}%."
  end

  def list_movies()
    puts "All Movies:"
    puts MovieEntries.all
    #can update this to var = MovieEntries.all; then have access to entries and movie and make this message whatever
  end

  def search_movie_entries_for(search_term)
    puts "You asked for: #{search_term}"
    puts MovieEntries.search(search_term)
  end

  def add_movie_entry
    error_messages = ArgumentParser.validate(options)
    if error_messages.empty?
      movie = Movie.find_or_create(title: options[:title])
      movie_entry = MovieEntries.new(options)
      movie_entry.movie = movie
      movie_entry.save
      puts "A movie named #{movie_entry.title}, with seen? #{movie_entry.seen}, own? #{movie_entry.own}, wishlist see #{movie_entry.wishlist_see}, wishlist own #{movie_entry.wishlist_own}, user rating #{movie_entry.user_rating}, released in #{movie_entry.movie.year}, rated #{movie_entry.movie.rated}, runtime #{movie_entry.movie.runtime}, genre #{movie_entry.movie.genre}, tomato meter #{movie_entry.movie.tomato_meter}, released by #{movie_entry.movie.production} with a box office of #{movie_entry.movie.box_office} was created"
    else
      puts error_messages
    end
  end
end

movie = MovieScript.new()
movie.main()
