#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'models/movie_entries'
require_relative 'lib/interactions'

#Router
class MovieScript
  include Interactions
  attr_reader :options

  def initialize
    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection

    if options[:command] == "search"
      search_term = ask("What do you want to search for?")
      search_movie_entries_for(search_term)
    elsif options[:command] == "add"
      error_messages = ArgumentParser.validate(options)
      if error_messages.empty?
        movie = Movie.find_or_create(options[:title])
        movie_entry = MovieEntries.new(options)
        movie_entry.movie = movie
        movie_entry.save
        puts "A movie named #{movie_entry.title}, with seen? #{movie_entry.seen}, own? #{movie_entry.own}, wishlist see #{movie_entry.wishlist_see}, wishlist own #{movie_entry.wishlist_own}, user rating #{movie_entry.user_rating} was created"
      else
        puts error_messages
      end
    elsif options[:command] == "list"
      list_movies()
    elsif options[:command] == "edit"
      if movie_entry = MovieEntries.find(options[:id])
        movie_entry.update(options)
        puts "Movie entry #{movie_entry.id} is now named #{movie_entry.title}, with seen #{movie_entry.seen}, own #{movie_entry.own}, wishlist see #{movie_entry.wishlist_see}, wishlist own #{movie_entry.wishlist_own}, user rating #{movie_entry.user_rating}"
      else
        puts "Movie entry #{options[:id]} couldn't be found"
      end
    else
      puts "Command not implemented"
    end
  end

  def list_movies()
    puts "All Movies:"
    puts MovieEntries.all
  end

  def search_movie_entries_for(search_term)
    puts "You asked for: #{search_term}"
    puts MovieEntries.search(search_term)
  end
end

movie = MovieScript.new()
movie.main()
