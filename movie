#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/parse_arguments'

command = ARGV[0]
options = ParseArguments.parse
options[:title] = ARGV[1]

if command == "search"
  puts "What do you want to search for?"
  input = $stdin.gets
  puts "You asked for: #{input}"
  # searching!
else
  error_messages = ParseArguments.validate(options)
  if error_messages.empty?
    require "sqlite3"
    database = Environment.database_connection(options[:environment])
    # This is ripe for SQL injection attack:
    statement = "insert into cinephile_movies_test(title, seen, own, wishlist_see, wishlist_own, user_rating) values('#{options[:title]}', '#{options[:seen]}', '#{options[:own]}', '#{options[:wishlist_see]}', '#{options[:wishlist_own]}', '#{options[:rating]}')"
    database.execute(statement)
    puts "A movie named #{options[:title]}, with seen? #{options[:seen]}, own? #{options[:own]}, wishlist see #{options[:wishlist_see]}, wishlist own #{options[:wishlist_own]}, rating #{options[:rating]}"
  else
    puts error_messages
  end
end